name: Build xsnippet-api Docker image

on:
  # Triggered manually
  workflow_dispatch:
    inputs:
      image_name:
        description: 'The name of the resulting Docker image'
        default: 'xsnippet/xsnippet-api'
      release_arch:
        description: 'The CPU architecture to use when choosing the xsnippet-api binary'
        default: 'x86_64'
      release_os:
        description: 'The OS to use when choosing the xsnippet-api binary'
        default: 'linux'
      release_tag:
        description: 'The release tag to use when choosing the xsnippet-api binary'
        default: 'latest'
      registry:
        description: 'The Docker registry to push the image to'
        type: choice
        options:
          - docker.io
      registry_username:
        description: 'The Docker registry user name'
        default: 'xsnippetci'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - id: release-params
        name: Look up the Github release by tag/name and prepare a list of tags to be attached to the Docker image
        shell: python
        run: |
          import json
          import os
          import urllib.error as e
          import urllib.request as r

          # look up the latest stable release (if any)
          try:
            latest_release = json.load(r.urlopen("https://api.github.com/repos/xsnippet/xsnippet-api/releases/latest"))
          except e.HTTPError as err:
            if err.code != 404:
              raise

            latest_release = None

          # look up the release by tag first; if not found, try to look it up by release name instead
          try:
            release = json.load(r.urlopen("https://api.github.com/repos/xsnippet/xsnippet-api/releases/tags/${{ github.event.inputs.release_tag }}"))
          except e.HTTPError as err:
            if err.code != 404:
              raise

            release = json.load(r.urlopen("https://api.github.com/repos/xsnippet/xsnippet-api/releases/${{ github.event.inputs.release_tag }}"))

          # The Docker image tags should include:
          # 1) the release tag
          tags = set([f"{release['tag_name']}"])
          # 2) "latest", if this is the latest stable release
          if latest_release and latest_release['tag_name'] == release['tag_name']:
            tags.add('latest')
          # 3) the release name, if it is different from the git tag
          if release['tag_name'] != '${{ github.event.inputs.release_tag }}':
            tags.add('${{ github.event.inputs.release_tag }}')

          with open(os.environ["GITHUB_OUTPUT"], "at") as f:
            f.write(f"release_tag={release['tag_name']}\n")
            f.write(f"image_tags={','.join('${{ github.event.inputs.image_name }}:' + t for t in tags)}\n")

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v1

      - name: Log into registry ${{ github.event.inputs.registry }}
        uses: docker/login-action@v1
        with:
          registry: ${{ github.event.inputs.registry }}
          username: ${{ github.event.inputs.registry_username }}
          password: ${{ secrets.XSNIPPET_CI_DOCKER_HUB_PASSWORD }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v2
        with:
          context: ./docker
          push: true
          tags: ${{ steps.release-params.outputs.image_tags }}
          build-args: |
            RELEASE_ARCH=${{ github.event.inputs.release_arch }}
            RELEASE_OS=${{ github.event.inputs.release_os }}
            RELEASE_TAG=${{ steps.release-params.outputs.release_tag }}
