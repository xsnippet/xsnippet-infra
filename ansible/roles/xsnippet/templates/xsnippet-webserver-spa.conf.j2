js_import conf.d/xsnippet_api.js;

{% if xsnippet_spa_https_enabled and xsnippet_spa_https_redirect %}
# redirect all HTTP requests to HTTPS
server {
    listen 80;
    server_name {{ xsnippet_spa_server_name }};

    # use a temporary redirect in case we want to tweak things (otherwise browsers
    # would cache the results of a permanent redirect)
    return 307 https://$host$request_uri;
}
{% endif %}

server {
    {% if not (xsnippet_spa_https_redirect and xsnippet_spa_https_enabled) %}
    # if redirects to HTTPS are not enforced, serve the content over HTTP as well
    listen 80;
    {% endif %}

    {% if xsnippet_spa_https_enabled %}
    listen 443 ssl;
    ssl_certificate     /etc/letsencrypt/live/{{ xsnippet_spa_server_name }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/{{ xsnippet_spa_server_name }}/privkey.pem;
    {% endif %}

    server_name {{ xsnippet_spa_server_name }};

    root /www/data;

    # web assets can be pretty large (>= 0.5 mb), so compress them before sending over the wire.
    # At the same time, it's probably not worth it for files smaller than 1kb. Compression ratio
    # of 5 seems to be a good balance between output size and CPU load.
    gzip on;
    gzip_comp_level 5;
    gzip_types text/plain text/css application/json application/x-javascript text/javascript application/javascript image/svg+xml;
    gzip_min_length 1024;

    location ~ ^/([a-zA-Z0-9]+)/raw/?$ {
        js_content xsnippet_api.get_raw_snippet;
    }

    # return the dynamic config, if it exists; otherwise, return 404, that will be handled by the SPA
    # (note, that we only need this because we normally convert all 404s to be 200s and return the SPA code below)
    location /conf.json {
        try_files /conf.json =404;
    }

    location / {
        error_page 404 =200 /index.html;

        index index.html;
    }
}
