upstream xsnippet_api {
    server localhost:8000;
}

{% if xsnippet_api_https_enabled and xsnippet_api_https_redirect %}
# redirect all HTTP requests to HTTPS
server {
    listen 80;
    server_name {{ xsnippet_api_server_name }};

    # use a temporary redirect in case we want to tweak things (otherwise browsers
    # would cache the results of a permanent redirect)
    return 307 https://$host$request_uri;
}
{% endif %}

server {
    {% if not (xsnippet_api_https_redirect and xsnippet_api_https_enabled) %}
    # if redirects to HTTPS are not enforced, serve the content over HTTP as well
    listen 80;
    {% endif %}

    {% if xsnippet_api_https_enabled %}
    listen 443 ssl;
    ssl_certificate     /etc/nginx/xsnippet_api_ssl.cert;
    ssl_certificate_key /etc/nginx/xsnippet_api_ssl.key;
    {% endif %}

    server_name {{ xsnippet_api_server_name }};

    # for large list of snippets it may be useful to turn on the gzip compression. At the same time
    # it's probably not worth it for files smaller than 1kb. Compression ratio of 5 seems to be a
    # good balance between output size and CPU load.
    gzip on;
    gzip_comp_level 5;
    gzip_types application/json application/javascript;
    gzip_min_length 1024;

    location / {
        if ($request_method = 'OPTIONS') {
            # The Access-Control-Allow-Origin response header indicates whether
            # the response can be shared with resources with the given origin.
            # In other words, browsers will fail to make a request if the
            # domain of the page from which the request is initiated does not
            # match one specified here.
            add_header 'Access-Control-Allow-Origin' '*';

            # The Access-Control-Allow-Methods header specifies the method or
            # methods allowed when accessing the resource. We do not know for
            # sure which methods are allowed by a certain API endpoint, so
            # allow any method and let the API decide which one should be
            # rejected in a post-preflight step.
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, PATCH, DELETE';

            # The Access-Control-Allow-Headers header is used in response to a
            # preflight request to indicate which HTTP headers can be used when
            # making the actual request. Normally browsers do have access to
            # Content-Type value; however, since we use application/json and
            # it's not safe-listed value, the Content-Type header must be
            # allowed explicitly.
            add_header 'Access-Control-Allow-Headers' 'Content-Type';

            # The Access-Control-Max-Age response header indicates how long the
            # results of a preflight request can be cached (in seconds).
            add_header 'Access-Control-Max-Age' 3600;

            # According to RFC 7230, 204 No Content does not require
            # Content-Type and Content-Length to be set; even more, the latter
            # must be omitted.
            return 204;
        }

        # The Access-Control-Allow-Origin response header indicates whether
        # the response can be shared with resources with the given origin.
        # In other words, browsers will fail to make a request if the
        # domain of the page from which the request is initiated does not
        # match one specified here.
        add_header 'Access-Control-Allow-Origin' '*';

        # The Access-Control-Expose-Headers header lets a server whitelist
        # headers that browsers are allowed to access. By default, only the
        # following "simple" headers are exposed:
        #
        #  * Cache-Control
        #  * Content-Language
        #  * Content-Type
        #  * Expires
        #  * Last-Modified
        #  * Pragma
        add_header 'Access-Control-Expose-Headers' 'Link';

        # set the appropriate headers, so that the upstream knowns it's deployed behind
        # a reverse proxy (e.g. so that it can generate the correct links)
        proxy_set_header HOST $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_pass http://xsnippet_api;
    }
}
