{% if xsnippet_api_rate_limits %}
# default limit for any request (per IP)
limit_req_zone $binary_remote_addr zone=default:10m  rate=10r/s;

# limit on creation of new snippets by unauthorized users (per IP).
map "$http_authorization:$request_method" $unauthenticated_post_limit {
    default     "";
    ":POST"     $binary_remote_addr;
}
limit_req_zone $unauthenticated_post_limit zone=unauthenticated:10m rate=20r/m;

# limit on creation of new snippets by authorized users (per IP).
# Note, that we here do not care whether the submitted token is correct or not - in the latter
# case we'll just respond with 401 Unauthorized.
map "$http_authorization:$request_method" $authenticated_post_limit {
    default      "";
    "~*.+:POST"  $binary_remote_addr;
}
limit_req_zone $authenticated_post_limit zone=authenticated:10m rate=1r/s;
{% endif %}

upstream xsnippet_api {
    server api:8000;
}

{% if xsnippet_api_https and xsnippet_api_https_redirect %}
# redirect all HTTP requests to HTTPS
server {
    listen 80;
    server_name {{ xsnippet_api_server_name }};

    # use a temporary redirect in case we want to tweak things (otherwise browsers
    # would cache the results of a permanent redirect)
    return 307 https://$host$request_uri;
}
{% endif %}

server {
    {% if not (xsnippet_api_https_redirect and xsnippet_api_https) %}
    # if redirects to HTTPS are not enforced, serve the content over HTTP as well
    listen 80;
    {% endif %}

    {% if xsnippet_api_https %}
    listen 443 ssl;
    ssl_certificate     /etc/nginx/xsnippet_api_ssl.cert;
    ssl_certificate_key /etc/nginx/xsnippet_api_ssl.key;
    {% endif %}

    server_name {{ xsnippet_api_server_name }};

    # for large list of snippets it may be useful to turn on the gzip compression. At the same time
    # it's probably not worth it for files smaller than 1kb. Compression ratio of 5 seems to be a
    # good balance between output size and CPU load.
    gzip on;
    gzip_comp_level 5;
    gzip_types application/json application/javascript;
    gzip_min_length 1024;

    location / {
{% if xsnippet_api_rate_limits %}
        # if someone exceeds the limit - respond with 429 Too Many Requests and treat this as a warning
        limit_req_log_level warn;
        limit_req_status    429;

        # The burst parameter defines how many requests a client can make in excess of the rate
        # specified by the zone.
        limit_req zone=unauthenticated burst=5 nodelay;
        limit_req zone=authenticated burst=5 nodelay;
        limit_req zone=default burst=5 nodelay;
{% endif %}

        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Link';
        add_header 'Access-Control-Expose-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Link';

        if ($request_method = 'OPTIONS') {
           add_header 'Access-Control-Allow-Origin' '*';
           add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
           add_header 'Access-Control-Max-Age' 1728000;
           add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Link';
           add_header 'Content-Type' 'text/plain; charset=utf-8';
           add_header 'Content-Length' 0;
           return 204;
        }

        # set the appropriate headers, so that the upstream knowns it's deployed behind
        # a reverse proxy (e.g. so that it can generate the correct links)
        proxy_set_header HOST $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        proxy_pass http://xsnippet_api;
    }
}
